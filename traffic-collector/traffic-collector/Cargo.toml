[package]
name = "traffic-collector"
version = "0.1.0"
edition = "2021"

license.workspace = true

[dependencies]
traffic-collector-common = { path = "../traffic-collector-common", features = ["user"] }

anyhow = { workspace = true, default-features = true }
aya = { workspace = true, version = "0.11.0", features = ["async_tokio"] }
aya-log = { workspace = true, version = "0.1.0" }
env_logger = { workspace = true, version = "0.10" }
libc = { workspace = true }
log = { workspace = true, version = "0.4" }
tokio = { workspace = true, features = [
    "macros",
    "rt",
    "rt-multi-thread",
    "net",
    "signal",
    "time",
    "full"
] }
chrono = "0.4"
serde_json = "1.0"
clap = { version = "4.4", features = ["derive"] }
crossbeam-channel = "0.5"
serde = { version = "1.0", features = ["derive"] }
glob = "0.3"
[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
traffic-collector-ebpf = { path = "../traffic-collector-ebpf" }

[[bin]]
name = "traffic-collector"
path = "src/main.rs"

[profile.release]
lto = true
